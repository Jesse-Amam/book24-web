{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from \"react\";\nimport Calendar from 'react-calendar';\nimport Chart from \"chart.js\"; // import { API_URL } from '../../../root.js'\n\nimport axios from \"axios\";\nimport { IconContext } from \"react-icons\";\nimport Cookies from 'js-cookie';\nimport { MdViewQuilt } from \"react-icons/md\";\nimport { FaUsersCog, FaListAlt, FaUsers, FaMapMarkerAlt } from \"react-icons/fa\";\n\nvar moment = require('moment');\n\nclass Admin extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"chartRef\", /*#__PURE__*/React.createRef());\n\n    this.state = {\n      first_name: '',\n      bookings: [],\n      users: []\n    };\n  }\n\n  componentDidMount() {\n    const myChartRef = this.chartRef.current.getContext(\"2d\");\n    new Chart(myChartRef, {\n      type: \"line\",\n      data: {\n        //Bring in data\n        labels: [\"Jan\", \"Feb\", \"March\"],\n        datasets: [{\n          label: \"Bookings\",\n          data: [86, 67, 91]\n        }]\n      },\n      options: {//Customize chart options\n      }\n    }); // this.getApiData();\n  }\n\n  async getApiData() {\n    // console.log(this.props.token)\n    // if(!this.props.token){\n    //   window.location.reload();\n    // }\n    let token = await Cookies.get('token'); // => 'value'\n\n    let id = Cookies.get('id'); // => 'value'\n\n    let role = Cookies.get('role');\n    var config = {\n      headers: {\n        'Authorization': \"Bearer \" + token\n      },\n      timeout: 20000\n    };\n    await axios.get(API_URL + \"bookings\", config).then(async response => {\n      console.log(response);\n\n      if (response.data && response.data.length > 0) {\n        console.log(\"response.data\");\n        console.log(\"here\" + response.data);\n\n        if (response.data.message == 'Token is not valid') {\n          this.props.history.push(\"/\");\n        }\n\n        var len = response.data.length;\n        this.setState({\n          bookings: []\n        });\n\n        for (let i = 0; i < len; i++) {\n          let row = response.data[i];\n          this.setState(prevState => ({\n            bookings: [...prevState.bookings, row]\n          }));\n        }\n      }\n\n      axios.get(API_URL + \"users/\" + this.props.id, config).then(async response => {\n        console.log(response);\n\n        if (response.data.message == 'Token is not valid') {\n          this.props.history.push(\"/\");\n        }\n\n        this.setState({\n          first_name: response.data.first_name\n        });\n        await axios.get(API_URL + \"users\", config).then(response => {\n          console.log(response);\n\n          if (response.data.message == 'Token is not valid') {\n            this.props.history.push(\"/\");\n          }\n\n          var len = response.data.length;\n          this.setState({\n            users: []\n          });\n\n          for (let i = 0; i < len; i++) {\n            let row = response.data[i];\n            this.setState(prevState => ({\n              users: [...prevState.users, row]\n            }));\n          }\n        }).catch(error => {\n          //    this.setState({regLoader: false})\n          if (error.code == 'ECONNABORTED') {//     Toast.show('Connection TImeout')\n          } else if (error.response.status == 404) {\n            this.props.history.push(\"/\");\n          } else {\n            //   Toast.show(error.message)\n            if (error.message == 'Token is not valid') {\n              this.props.history.push(\"/\");\n            }\n          }\n\n          console.log(error);\n        });\n      }).catch(error => {\n        //    this.setState({regLoader: false})\n        if (error.code == 'ECONNABORTED') {//     Toast.show('Connection TImeout')\n        } else if (error.response.status == 404) {\n          this.props.history.push(\"/\");\n        } else {\n          //   Toast.show(error.message)\n          if (error.message == 'Token is not valid') {\n            this.props.history.push(\"/\");\n          }\n        }\n\n        console.log(error);\n      });\n    }).catch(error => {\n      this.setState({\n        regLoader: false\n      });\n\n      if (error.code == 'ECONNABORTED') {//     Toast.show('Connection TImeout')\n      } else {\n        //   Toast.show(error.message)\n        if (error.message == 'Token is not valid') {\n          this.props.history.push(\"/\");\n        }\n      }\n\n      console.log(error);\n    });\n  }\n\n  render() {\n    return __jsx(\"div\", {\n      className: \"main-box\"\n    }, __jsx(\"p\", {\n      className: \"welcome-header\"\n    }, \"Hey \", this.state.first_name && this.state.first_name), __jsx(\"p\", {\n      className: \"date-text\"\n    }, moment().format(\"dddd, MMMM Do YYYY\")), __jsx(\"div\", {\n      className: \"content-box\"\n    }, __jsx(\"div\", {\n      className: \"first-content-div\"\n    }, __jsx(\"div\", {\n      className: \"card-holder\"\n    }, __jsx(\"div\", {\n      className: \"card-div\"\n    }, __jsx(\"p\", {\n      className: \"total-text\"\n    }, \"TOTAL BOOKING\"), __jsx(\"p\", {\n      className: \"total-value\"\n    }, this.state.bookings.length)), __jsx(\"div\", {\n      className: \"card-div\"\n    }, __jsx(\"p\", {\n      className: \"total-text\"\n    }, \"TOTAL USERS\"), __jsx(\"p\", {\n      className: \"total-value\"\n    }, this.state.users.length))), __jsx(\"p\", {\n      className: \"daily-text\"\n    }, \"Daily Booking Analysis\"), __jsx(\"canvas\", {\n      id: \"myChart\",\n      ref: this.chartRef\n    })), __jsx(\"div\", {\n      className: \"first-content-div\"\n    }, __jsx(Calendar, null), __jsx(\"p\", {\n      className: \"daily-text\"\n    }, \"Booking Count\"), __jsx(\"div\", {\n      className: \"order-count-div\"\n    }, __jsx(\"p\", {\n      className: \"total-count-text\"\n    }, \"This year: \", this.state.bookings.length), __jsx(\"p\", {\n      className: \"total-count-text\"\n    }, \"This month: **\")))));\n  }\n\n}\n\nexport default Admin;","map":null,"metadata":{},"sourceType":"module"}